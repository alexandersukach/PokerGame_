Poker Game:

"Classes"???? "Headers"?????

Player
    1. The user
    2. Few CPUs

Dealt cards can be placed on a stack and displayed by popping (you peek at the top card, then the bottom card)


Usually, you would alternate between two decks, but I think that the deallocation would be a good implementation here. the deck just
used should be tossed, the deck just shuffled is to be used, and a deck one should be created to be shuffled

Deck
    1. 52 Cards: A->K Hears, A->K Clubs, K->A Diamonds, K->A Spades
    2. Two decks that alternate in use by hand. The hand not in use is to be shuffled
    3. Shuffle the deck randomly 7 times and end by cutting in the middle.

Linked List can be used and each card dealt, pulled out will be from there...how could I randomize it though?


To Begin:
    1. User chooses buy-in
    2. Blinds are generated based on this buy-in value
    3. Each player is dealt two cards.
    4. The player to left of the dealer is the small blind
    5. The player to the right of that player is the big blind
    6. After every hand, the dealer button and blinds move one person clockwise. 
    7. Each hand, the dealer first deals to the small blind, then big blind, then all the way back to himself.
    8. A card is burned before the flop
    9. Flop occurs - three cards layed out (flop)
    10. Each round of betting, the small blind has the action first
    11. The user is given a choice to check, call, or fold; they could also even raise, which would be twice the initial bet ($5 - $10)
    (For right now, we will not worry about the computer's actions)
    12. Once pot is good, one more card burned and one more shown (theturn) 
    13. Betting process repeats
    14. Finally, one more burn and then the river 
    15. Repeat bets
    16. Player to left of button shows cards first or is it last aggressive player
A Queue could be implemented when action on new player...
    1. CircularDoublyLinkedList....if someone raises, thats where the rear becomes, and the turns are moved in a circle until that is reached

Card:
    1. Suit 
    2. Face (2-10,J,Q,K; A 1/11)
    3. Might need checks equal face or checks equal suit; loop this through so you can figure out best order for ranking 


Card Ranking:
I think the cards should be sorted to check for straight, suit can be checked regardless, 

Pair, Two pair, three of a kind, straight, flush, full house, four of a kind, straight flush, royal flush

/*
i want each card to be a node that's dealt...then we can sort in ascending, and check for hand strength....
new Game class in int? How would I make that work...


How do i incorporate community cards...

Can I take them all and make into array 

Two cards dealt to players...
One card burned after pots good, flop,
Another round bets, burn and turn
Another round bets, 
Sort the cards in ascending order
Compare values for equality
    Maybe inefficient:
    Only create count of number if number there,
    Say, theres a 3, increase countThree by one
    Say, theres no 4, don't create a countFour...if that makes sense
Count instances of suits
set value cards: j - 11, q - 12, k - 13, a - 1 or 14? depending on the hand low straight vs high straight

if occurance of a, check if straight at start
else check if straight up top
Check for pair:
Set count for occurances of cards;

Check for two pair:
Two occurances of pairs

Check for three of a kind:
Three occurances of one card

Check for quads:
Four occurances of one card

Check for full house:
A three of a kind and a pair

Check for straight:
5 cards are sequential

Check for flush:
5 cards are of the same suit

Check for straight flush:
Both a straight and flush;

Check for royal flush:
Both straight flush of A, K, Q, J, 10

Consider kickers, aka second card that settles in case of a tie...
*/

Do I need to check for whose turn it is?




INT MAIN FROM CODE FILE:
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

int main() {

    //If big blind remove 10 if small blind remove 5 add to pot...

    //You start out as small blind...you're head of queue, to your left is big blind and head -> next;
    //YOu throw in 5 and big blind throws in 10

    // Each new rotation, set whatever player is the front of the queue as issmallblind true, and the next as isbigblind true
    //After that you play the hand with a betting round first before any cards are dealt
    // How do i go about changing player action depending on their standing as some of my comments belowed in terms of limiting options of when to bet
    // each round set a made bet flag i guess
    // be like go to next and ask if they want to bet until end of queue reached, where would the bet made be made, where do we track that and the pot
    game.dealHoleCards();
    
    // Show user what cards he has

    // If not smallblind or bigblind, either don't bet, call...no preflop raise
    //
    game.dealFlop();


    /*Game
    Would you like to bet, call, check, fold
    If no bet needs to be made, only do bet, check....nothing to call, and folding on a check would be idiotic

    If cpu raises, you can call, reraise, or fold
    */
    // Ask user what he wants to do


// REMEMBER NO PREFLOP RAISES
// Small blind and other players have chance to back out
// Big blind is automatic check...
// Only one raise across all players per turn
// Case 1: Big Blind: Adds 10, do noption to bet, check, raise, fold
// Case 2: Little Blind: Ask if you want to call the extra 5 to cover the big blind, or fold
// Case 3: No one has bet around the table, would you like to bet or check
// Case 4: Someone has bet, you can either call or fold

// Cases 1,2 check isBigBlind and isSmallBlind flags
// Cases 3,4 check ifBetMade flag; keep track of total bet
//THESE ARE ALL PER TURN


// FOLD IS EMPTY UP TOP, IF FOLD HAPPENS, MAKE SURE TO REMOVE PLAYER FROM CURRENT ROUND
//we could do currentBet count;


//isSmallBlind is the front of players queue (first player to left of dealer)
//smallBlind is head of queue; player to right of dealer is tail of queue
//After each round, I want it to shift so head->next becomes head; and the tail->next = head and tail = head (shifting one over)
    // if userBet doesn't equal highest bet of that hand....reset the highest bet flag...if someone re raises and a player hasn't
    // added any money, he must add the initial bet plus the raise

    game.dealTurn();

    // Ask user what he wants to do

    game.dealRiver();

    // Ask user what he wants to do

    // Show cards

    // Compare and determine winnings

    // New deck, same game





}