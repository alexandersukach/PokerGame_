STATUS:
Nov. 9th, 2023 

CARD - compiles
     - no current concerns


DOUBLYLINKEDLIST - compiles (when using c++17; nullptr identified with just g++)
    - Template class, meaning datatypes other than node can utilize it.
* This is a good thing as we don't have to recompile the entire library for different data types.

HAND - ~/Desktop/PokerGame_> g++ Hand.cpp
Hand.cpp:28:43: error: non-aggregate type 'std::vector<Card>' cannot be
      initialized with an initializer list
  ...tempHand = {cards[i], cards[j], cards[k], cards[m], cards[n]};
     ^          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 error generated.
~/Desktop/PokerGame_> g++ -std=c++17  Hand
Hand.cpp  Hand.h
~/Desktop/PokerGame_> g++ -std=c++17  Hand.cpp
Undefined symbols for architecture x86_64:
  "Card::getRank() const", referenced from:
      compareCardsByRank(Card const&, Card const&) in Hand-42d900.o
      Hand::isRoyalFlush(std::__1::vector<Card, std::__1::allocator<Card> > const&) const in Hand-42d900.o
      Hand::isFourOfAKind(std::__1::vector<Card, std::__1::allocator<Card> > const&) const in Hand-42d900.o
      Hand::isFullHouse(std::__1::vector<Card, std::__1::allocator<Card> > const&) const in Hand-42d900.o
      Hand::isStraight(std::__1::vector<Card, std::__1::allocator<Card> > const&) const in Hand-42d900.o
      Hand::isThreeOfAKind(std::__1::vector<Card, std::__1::allocator<Card> > const&) const in Hand-42d900.o
      Hand::isTwoPair(std::__1::vector<Card, std::__1::allocator<Card> > const&) const in Hand-42d900.o
      ...
  "Card::getSuit() const", referenced from:
      Hand::isFlush(std::__1::vector<Card, std::__1::allocator<Card> > const&) const in Hand-42d900.o
  "_main", referenced from:
     implicit entry/start for main executable
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)




Over the course of the project, I settled into this approach for int main()

1. Create a poker game for 5 players (1 user, 4 computer) with a set buyin. 
2. Create a queue with the user and computer players....

NOT IN ORDER BUT ALSO, REMEMBER TO CHECK WHETHER HUMAN OR NOT BEFORE HANDLING ACTIONS
3. While (!gameOver)
    - Initialize a deck.
    - Deal hole cards
    - Round of betting
    - Deal turn card
    - Round of betting
    - Deal river card
    - Round of betting
    - Compare hands 
    - Display winner
    - Reset hand
    - Repeat until game over (meaning you don't have any money)

* I could also add a feature where the user can print everyone's balance
before placing his own bet.....; 
I need to think about bounds checking and more messages that'll come up in given situations if that makes sense
Would I do 'isBigBlind' or 'isSmallBlind' check in 'BettingRound' and 
set the beginning pot accordingly????
I need to ensure that before every betting round, the players who folded 
are not included...then that active players should reset when the new deck is initialized
If they're out they're out though (remove Player if balance zero)

How can I handle dealer button?
I want the first person in the queue to be small blind, always put 5 in so pot has at least something
the next person is the bigblind, again put 10 in so theres always money.
when hole cards are dealt, every person has to call th 10 to stay in the hand, except the small bling who only
needs to call 5. 
With each new round of poker, the smallblind and bigblind should shift to next if that makes sense
so head ->next = head and then head = tail.....
I think having a flag to mark who its big/smallblind would be useful...
how do I go about making that shift though for the queue of players to be used
....do you understand how game of hold em works...when i say round of poker, i don't mean betting round. when i say round of poker, i mean including the four betting rounds




Is destructor in doublylinkedlist needed?

Deck dealCard necessary? given we've already got deal the cards...
